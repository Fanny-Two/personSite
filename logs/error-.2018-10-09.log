[2018-10-09T11:43:56.152][ERROR  23324  default] jb xian
[2018-10-09T11:44:01.163][ERROR  23324  default] jb xian
[2018-10-09T11:44:06.173][ERROR  23324  default] jb xian
[2018-10-09T11:44:11.181][ERROR  23324  default] jb xian
[2018-10-09T11:44:16.187][ERROR  23324  default] jb xian
[2018-10-09T11:44:21.196][ERROR  23324  default] jb xian
[2018-10-09T11:44:26.203][ERROR  23324  default] jb xian
[2018-10-09T11:49:39.907][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.002][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.007][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.012][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.015][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.015][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.016][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.052][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.059][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.069][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.101][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.110][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.113][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.116][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.167][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.173][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.353][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.355][ERROR  22660  default] xianzai
[2018-10-09T11:49:41.904][ERROR  22660  default] xianzai
[2018-10-09T11:49:51.795][ERROR  22660  default] xianzai
[2018-10-09T11:49:56.802][ERROR  22660  default] xianzai
[2018-10-09T11:50:01.811][ERROR  22660  default] xianzai
[2018-10-09T11:50:06.820][ERROR  22660  default] xianzai
[2018-10-09T11:50:10.911][ERROR  22660  default] xianzai
[2018-10-09T11:50:11.859][ERROR  22660  default] xianzai
[2018-10-09T11:50:12.766][ERROR  22660  default] xianzai
[2018-10-09T11:50:13.078][ERROR  22660  default] xianzai
[2018-10-09T11:50:13.502][ERROR  22660  default] xianzai
[2018-10-09T11:50:13.510][ERROR  22660  default] xianzai
[2018-10-09T11:50:13.515][ERROR  22660  default] xianzai
[2018-10-09T11:50:16.866][ERROR  22660  default] xianzai
[2018-10-09T11:50:21.873][ERROR  22660  default] xianzai
[2018-10-09T11:50:26.881][ERROR  22660  default] xianzai
[2018-10-09T11:50:31.888][ERROR  22660  default] xianzai
[2018-10-09T11:50:36.898][ERROR  22660  default] xianzai
[2018-10-09T11:50:41.906][ERROR  22660  default] xianzai
[2018-10-09T11:50:46.914][ERROR  22660  default] xianzai
[2018-10-09T11:50:51.924][ERROR  22660  default] xianzai
[2018-10-09T11:50:56.931][ERROR  22660  default] xianzai
[2018-10-09T11:51:01.937][ERROR  22660  default] xianzai
[2018-10-09T11:51:06.946][ERROR  22660  default] xianzai
[2018-10-09T11:51:11.953][ERROR  22660  default] xianzai
[2018-10-09T11:51:16.961][ERROR  22660  default] xianzai
[2018-10-09T11:51:21.972][ERROR  22660  default] xianzai
[2018-10-09T11:51:26.980][ERROR  22660  default] xianzai
[2018-10-09T11:51:31.987][ERROR  22660  default] xianzai
[2018-10-09T11:51:36.996][ERROR  22660  default] xianzai
[2018-10-09T11:51:42.004][ERROR  22660  default] xianzai
[2018-10-09T11:51:47.011][ERROR  22660  default] xianzai
[2018-10-09T11:51:52.018][ERROR  22660  default] xianzai
[2018-10-09T11:51:57.027][ERROR  22660  default] xianzai
[2018-10-09T11:52:02.037][ERROR  22660  default] xianzai
[2018-10-09T11:52:07.043][ERROR  22660  default] xianzai
[2018-10-09T11:52:12.052][ERROR  22660  default] xianzai
[2018-10-09T11:52:17.059][ERROR  22660  default] xianzai
[2018-10-09T11:52:22.067][ERROR  22660  default] xianzai
[2018-10-09T11:52:27.074][ERROR  22660  default] xianzai
[2018-10-09T12:07:02.792][ERROR  16764  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '### 参数传值\n* 参数默认值不是传值的，而是每次都重新计算默认值表达式的值，也就是说参数是**惰性求值**\n```\nlet x = 99;\nfunction foo (p = x + 1) {\n  console.log(p);\n}\n\nfoo(); // 100\nx = 100;\nfoo(); // 101\n```\n### 参数默认值位置\n* 通常定义默认值的参数应该是函数的尾参数。因为这样能够看出省略了那些参数\n* 如果传入undefined，将会默认触发该参数等于默认值，因为判断都是绝对等于undefined\n\n### 函数的length属性\n* 函数length的含义是：该函数预期传入的参数个数。某个参数指定默认值以后，后面的将不计算到length属性\n\n### 作用域\n* 参考https://segmentfault.com/a/1190000011900527\n* 一旦设置参数的默认值，函数在进行生命初始化时，参数会形成一个单独的作用域，等到初始化结束，这个作用域就会消失，这种语法行为在不设置参数默认值的时候不会出现的\n* 在预解析阶段，会将所有的变量声明（只提升声明不提升赋值）以及函数声明（指整个函数），提升到其所在的作用域的最顶上，一般会先提升函数声明再提升变量声明。函数声明优先级高，但是函数和变量是不一样的，提升的优先级是函数比较高，但是实际运行过程中，只有变量才会重新赋值计算\neg：\n\n```\nconsole.log(typeof f);  // function，函数优先级高于变量声明\n\nvar f;\n\nconsole.log(typeof f); // function,因为函数优先级高于变量声明\n\nvar f = 5;\n\nconsole.log(typeof f); // number,因为上面对f进行赋值操作\n\nfunction f(){};\n\nconsole.log(typeof f); // number， 相当与声明的语句只要在编译的时候有效\n```\n \n```\nvar x = 1;\nfunction foo(x =x) {\n  // ...\n}\n// error\n报错，暂时性死区的影响\n```\n```\nvar x = 1;\nfunction foo(x, y = function() { x = 2;}) {\n  console.log(x); // undefined 被下面var a = 3覆盖\n  var x = 3;\n  y();\n  console.log(x); // undefined\n  console.log(x);\n}\nfoo(); // 3\nconsole.log(x); // 1\n```\n### 指定参数不能省略（利用参数惰性求值）\n```\nfunction throwIfMissing() {\n  throw new Error(\'Missing parameter\')\n}\nfunction foo(mustBeProvided = throwIfMissing()) {\n  return mustBeProvided\n}\n```\n\n### rest参数\n* 替换argument参数\n* 相比较而言： rest参数变量代表一个数组，所有数组特有的方法都可以用这个变量\n* rest参数之后不能再有其他参数，即只能是最后一个参数\n\n### 严格模式在es6上面的修改\n* es6规定只要函数参数使用了默认值、解构赋值或者扩展运算符，那么函数内部就不能显示设定为严格模式，否则将会报错\n* 这样规定的原因，就是函数内部的严格模式同时适用于函数体和函数参数。但是，函数执行时，先执行函数参数，然后在函数体，这样就有一个不合理的地方；只有从函数体之中才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行，但是此时参数相当于是语句。\n* 两种方法解决这个问题\n  * 一种就是全局性的严格模式\n  * 把数包在一个无参数的立即执行函数里面\n\n```\nconst daSomething = (function () {\n  \'use strict\';\n  return function (a = 5) {\n    console.log(a);\n  }\n})()\n```\n\n### name属性\n* 返回函数的名称\n### 箭头函数\n* 在箭头函数里面{} 被解释为代码块\n* 不能当做构造函数，不可以使用new命令，因为没有自己的this\n* 不可以使用argument对象，可以使用rest参数代替\n* 不可以是使用yield命令，因此箭头函数不可以用作Generator函数\n* 除了this，以下三个变量在箭头函数中也是不存在，分别指向外层函数的对应变量\n  * argument \n  * super\n  * new.target\n\n### 绑定this （ES7）\n* 使用双冒号，左边一个对象，右边一个函数。该运算符会自动将左边对象做为上下文环境绑定到右边函数上\n* 如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上。\n* 双冒号运算符返回的还是原对象\n\n### 尾调用优化\n这是函数式编程的一个重要概念，本身十分简单，我们知道函数调用会在内存中形成一个‘调用记录’， 又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A内部调用函数B，那么在函数A的调用帧上方还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失，那么如果在B的内部调用函数C，那么将会有一个C的调用帧，以此类推，所有的调用帧将会形成一个调用栈（call stack）\n尾调用由于是函数的最后一步，所以不需要保留外层函数的调用帧，因为调用的位置、内部变量等信息都不会再用到了，直接用内层函数调用帧取代外层函数。做到每次执行的调用帧只有一项，这将大大节省内存，这就是尾调用优化的意义。\n\n### 尾递归\n函数调用自身称之为递归，如果尾调用自身就称之为尾递归。\n\n### 开启尾调用优化\nes6 尾调用优化只在严格模式下开启，正常模式下无效，这是因为在正常模式下函数内部有两个变量，可以跟踪函数的调用栈。\n* arguments： 返回调用时函数的参数\n* caller： 返回调用当前函数的那个函数\n\n尾调用优化发生时，函数的调用栈将会被改写，因此上面两个变量就会失真，严格模式下禁用链两个变量，所以尾调用模式仅仅在严格模式下生效。\n\n### 实现尾调用优化（正常模式下面实现）\n原理: 减少调用栈就不会发生溢出，使用循环代替递归\n\n```\n// 蹦床函数(需要函数最后返回函数)\nfunction trampoline(f) {\n  while(f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n```\n```\n// 真正的尾调用优化函数 （精华）\nfunction tco() {\n  var value;\n  var active = false;\n  var accumulated = [];\n\n  return function accumulator() {\n    accumulated.push(arguments);\n    if (!active) {\n      active = true;\n      while (accumulated.length) {\n        value = f.apply(this, accumulated.shift());\n      }\n      active = false;\n      return value;\n    } \n  }\n}\nf.apply(this, accumulated.shift())返回的是sum(x+1,y+1);\n而sum = tco(func···),且此时active为true，所以函数返回undefined，\n但是却将参数传给accumulated，所以while在循环，直到结束，精巧\n\n```\n',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Missing parameter')
}
function foo(mustBeProvided = throwIfMissing()) {
  return' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'Missing parameter\')\n}\nfunction foo(mustBeProvided = throwIfMissing()) {\n  return\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'### 参数传值\n* 参数默认值不是传值的，而是每次都重新计算默认值表达式的值，也就是说参数是**惰性求值**\n```\nlet x = 99;\nfunction foo (p = x + 1) {\n  console.log(p);\n}\n\nfoo(); // 100\nx = 100;\nfoo(); // 101\n```\n### 参数默认值位置\n* 通常定义默认值的参数应该是函数的尾参数。因为这样能够看出省略了那些参数\n* 如果传入undefined，将会默认触发该参数等于默认值，因为判断都是绝对等于undefined\n\n### 函数的length属性\n* 函数length的含义是：该函数预期传入的参数个数。某个参数指定默认值以后，后面的将不计算到length属性\n\n### 作用域\n* 参考https://segmentfault.com/a/1190000011900527\n* 一旦设置参数的默认值，函数在进行生命初始化时，参数会形成一个单独的作用域，等到初始化结束，这个作用域就会消失，这种语法行为在不设置参数默认值的时候不会出现的\n* 在预解析阶段，会将所有的变量声明（只提升声明不提升赋值）以及函数声明（指整个函数），提升到其所在的作用域的最顶上，一般会先提升函数声明再提升变量声明。函数声明优先级高，但是函数和变量是不一样的，提升的优先级是函数比较高，但是实际运行过程中，只有变量才会重新赋值计算\neg：\n\n```\nconsole.log(typeof f);  // function，函数优先级高于变量声明\n\nvar f;\n\nconsole.log(typeof f); // function,因为函数优先级高于变量声明\n\nvar f = 5;\n\nconsole.log(typeof f); // number,因为上面对f进行赋值操作\n\nfunction f(){};\n\nconsole.log(typeof f); // number， 相当与声明的语句只要在编译的时候有效\n```\n \n```\nvar x = 1;\nfunction foo(x =x) {\n  // ...\n}\n// error\n报错，暂时性死区的影响\n```\n```\nvar x = 1;\nfunction foo(x, y = function() { x = 2;}) {\n  console.log(x); // undefined 被下面var a = 3覆盖\n  var x = 3;\n  y();\n  console.log(x); // undefined\n  console.log(x);\n}\nfoo(); // 3\nconsole.log(x); // 1\n```\n### 指定参数不能省略（利用参数惰性求值）\n```\nfunction throwIfMissing() {\n  throw new Error(\'Missing parameter\')\n}\nfunction foo(mustBeProvided = throwIfMissing()) {\n  return mustBeProvided\n}\n```\n\n### rest参数\n* 替换argument参数\n* 相比较而言： rest参数变量代表一个数组，所有数组特有的方法都可以用这个变量\n* rest参数之后不能再有其他参数，即只能是最后一个参数\n\n### 严格模式在es6上面的修改\n* es6规定只要函数参数使用了默认值、解构赋值或者扩展运算符，那么函数内部就不能显示设定为严格模式，否则将会报错\n* 这样规定的原因，就是函数内部的严格模式同时适用于函数体和函数参数。但是，函数执行时，先执行函数参数，然后在函数体，这样就有一个不合理的地方；只有从函数体之中才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行，但是此时参数相当于是语句。\n* 两种方法解决这个问题\n  * 一种就是全局性的严格模式\n  * 把数包在一个无参数的立即执行函数里面\n\n```\nconst daSomething = (function () {\n  \'use strict\';\n  return function (a = 5) {\n    console.log(a);\n  }\n})()\n```\n\n### name属性\n* 返回函数的名称\n### 箭头函数\n* 在箭头函数里面{} 被解释为代码块\n* 不能当做构造函数，不可以使用new命令，因为没有自己的this\n* 不可以使用argument对象，可以使用rest参数代替\n* 不可以是使用yield命令，因此箭头函数不可以用作Generator函数\n* 除了this，以下三个变量在箭头函数中也是不存在，分别指向外层函数的对应变量\n  * argument \n  * super\n  * new.target\n\n### 绑定this （ES7）\n* 使用双冒号，左边一个对象，右边一个函数。该运算符会自动将左边对象做为上下文环境绑定到右边函数上\n* 如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上。\n* 双冒号运算符返回的还是原对象\n\n### 尾调用优化\n这是函数式编程的一个重要概念，本身十分简单，我们知道函数调用会在内存中形成一个‘调用记录’， 又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A内部调用函数B，那么在函数A的调用帧上方还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失，那么如果在B的内部调用函数C，那么将会有一个C的调用帧，以此类推，所有的调用帧将会形成一个调用栈（call stack）\n尾调用由于是函数的最后一步，所以不需要保留外层函数的调用帧，因为调用的位置、内部变量等信息都不会再用到了，直接用内层函数调用帧取代外层函数。做到每次执行的调用帧只有一项，这将大大节省内存，这就是尾调用优化的意义。\n\n### 尾递归\n函数调用自身称之为递归，如果尾调用自身就称之为尾递归。\n\n### 开启尾调用优化\nes6 尾调用优化只在严格模式下开启，正常模式下无效，这是因为在正常模式下函数内部有两个变量，可以跟踪函数的调用栈。\n* arguments： 返回调用时函数的参数\n* caller： 返回调用当前函数的那个函数\n\n尾调用优化发生时，函数的调用栈将会被改写，因此上面两个变量就会失真，严格模式下禁用链两个变量，所以尾调用模式仅仅在严格模式下生效。\n\n### 实现尾调用优化（正常模式下面实现）\n原理: 减少调用栈就不会发生溢出，使用循环代替递归\n\n```\n// 蹦床函数(需要函数最后返回函数)\nfunction trampoline(f) {\n  while(f && f instanceof Function) {\n    f = f();\n  }\n  return f;\n}\n```\n```\n// 真正的尾调用优化函数 （精华）\nfunction tco() {\n  var value;\n  var active = false;\n  var accumulated = [];\n\n  return function accumulator() {\n    accumulated.push(arguments);\n    if (!active) {\n      active = true;\n      while (accumulated.length) {\n        value = f.apply(this, accumulated.shift());\n      }\n      active = false;\n      return value;\n    } \n  }\n}\nf.apply(this, accumulated.shift())返回的是sum(x+1,y+1);\n而sum = tco(func···),且此时active为true，所以函数返回undefined，\n但是却将参数传给accumulated，所以while在循环，直到结束，精巧\n\n```\n\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:07\'\n      where id=186\n    ' }
[2018-10-09T12:20:28.735][ERROR  16764  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '####\'',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '测试线文章的',
        categroy_id='19',
        update_time='2018-10-09 1' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 1\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'####\'\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:20\'\n      where id=186\n    ' }
[2018-10-09T12:22:30.763][ERROR  16764  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\'',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '测试线文章的',
        categroy_id='19',
        update_time='2018-10-09 1' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 1\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\'\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:22\'\n      where id=186\n    ' }
[2018-10-09T12:28:03.787][ERROR  14024  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\'',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '测试线文章的',
        categroy_id='19',
        update_time='2018-10-09 1' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 1\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\'\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:27\'\n      where id=186\n    ' }
[2018-10-09T12:30:43.105][ERROR  6852  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ');
        
        oBtn.onclick = function() {
            let script = documen' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \');\n        \n        oBtn.onclick = function() {\n            let script = documen\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\\\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:30\'\n      where id=186\n    ' }
[2018-10-09T12:34:26.955][ERROR  12468  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '[同源策略-知乎][1]
[浏览器的同源策略-MDN][2]


---
* 什么是：' at line 6
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：\' at line 6',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg,\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 12:34\'\n      where id=186\n    ' }
[2018-10-09T12:37:14.480][ERROR  12468  default] /api/admin/article/operate { title: '新建',
  categroy: '前端',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\'',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '测试线文章的',
        categroy_id='16',
        update_time='2018-10-09 1' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'测试线文章的\',\n        categroy_id=\'16\',\n        update_time=\'2018-10-09 1\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\',\n        descript=\'测试线文章的\',\n        categroy_id=\'16\',\n        update_time=\'2018-10-09 12:37\'\n      where id=186\n    ' }
[2018-10-09T13:00:03.978][ERROR  13120  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'btn\\');
        
        oBtn.onclick = function() {
            let script = d' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = d\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\\\\\'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 13:00\'\n      where id=186\n    ' }
[2018-10-09T13:01:21.073][ERROR  13120  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'btn\\');
        
        oBtn.onclick = function() {
            let script = d' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = d\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\\\\\'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 13:00\'\n      where id=186\n    ' }
[2018-10-09T13:02:21.700][ERROR  13120  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'btn\\');
        
        oBtn.onclick = function() {
            let script = d' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = d\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\\\\\'btn\\\\\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 13:02\'\n      where id=186\n    ' }
[2018-10-09T13:06:26.348][ERROR  14608  default] /api/admin/article/operate { title: '新建',
  categroy: '前',
  tags: [ 'JavaScript' ],
  descript: '测试线文章的',
  content: '\n# 浏览器同源策略及规避Ajax中jsonp跨域解决方案\n\n\n[同源策略-知乎][1]\n[浏览器的同源策略-MDN][2]\n\n\n---\n* 什么是：“同源策略”。\n\n* 判断两个url是不是同源\n\n* 了解现代浏览器的部分同源策略\n\n* jsonp实现原理\n\n\n# 同源策略（SOP）\n## 一、同源策略是什么？\n### 1.1出现\n1995年，同源策略由Netscape公司引入到浏览器也是由Netscape提出的一个著名的安全策略。直至目前为止，所有的浏览器都在使用这个策略。\n### 1.2含义\n所谓的“同源”指的是三个相同\n\n* 协议相同\n* 域名相同\n* 端口相同\n\n我们将三个相同的视为同一个**域**，一个域的脚本仅仅具有本域内的权限，可以理解为本域脚本只能读写本域内的资源，而无法访问其他域的资源。这种安全限制称之为同源策略。\n\n详细例子：\n\n![此处输入图片的描述][3]\n\n小问题：是否允许进行通信（依赖浏览器实现）\n\nhttp://www.a.com:80/page1.html\nhttp://www.a.com/page2.html\n\n## 二、现代浏览器的同源策略-不受限制（部分规则）\n### 1.1、现代浏览器同源策略出现背景\n安全性和方便性是成反比的，十位数的密码提高了安全性，但是不方便记忆。同样，同源策略提升了Web前端的安全性，但牺牲了Web拓展上的灵活性。设想若把html、js、css、flash，image等文件全部布置在一台服务器上，小网站这样凑活还行，大中网站如果这样做服务器根本受不了的，可用性都不能保证的话，安全性还算个吊？\n所以，现代浏览器在安全性和可用性之间选择了一个平衡点。在遵循同源策略的基础上，选择性地为同源策略“开放了后门”。\n\n### 1.2、开放的后门\n所以就有不受同源策略限制的：\n\n```\n多媒体元素标签<img src="">\n脚本标签<script src="">\n样式标签<link rel="stylesheet" href="">\n<frame>, <iframe>\n<a>\n还有其他的···\n```\n\n### 1.3、不是绝对的（考虑这是什么的端的限制，Node为什么可以获得文件）\n\n今天所讲的都有一个前提是浏览器针对同源策略的一种实现\n\n但是这不是绝对的；例如img **script** style等标签，都允许垮域引用资源，严格说这都是不符合同源要求的（怎么理解）。然而，你也只能是引用这些资源而已，并不能读取这些资源的内容，不信你可以试试：在你自己的域内读取百度logo图片的内容，以读取到二进制数据为准。（暴脾气，试试就试试，who怕who）\n你很快发现这是不可能的，你顶多只能判断这张图片是否存在（使用的img标签的onerror属性 ）。因此浏览器降低了那么一点点安全性，却大大提升网站布置的灵活性。\n\n## 三、现代浏览器的同源策略-限制（部分规则）\n\n### 1.1、限制内容\n\n随着互联网的发展，“同源策略”越来越严格（原因都知道，互联网安全越来越重要），直到目前，如果非同源，总共有三种行为收到限制。\n\n* Cookie、LocalStorage和IndexDB无法读取\n* DOM无法获取\n* AJAX请求不能发送（XmlHttpRequest对象向不同源的服务器地址发送HTTP请求）\n\n### 1.2、为什么要限制\n\n为了保证用户信息安全，防止恶意网站窃取数据。\n\n#### 1.2.1、Cookie的无法读取\n\n设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？\n很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源策略的限制\n（我的理解是：Cookie是一个可以识别你身份的东西，不一定保存账号名和密码，或许仅仅是一个登录ID，让服务器知道你的身份避免重新登录，这里面也很多知识，仅仅是我现在的了解）\n#### 1.2.2、DOM无法获取\n再举个例子，现在我扮演坏人 我通过一个iframe 加载某宝的登录页面 等傻傻的用户登录我的网站的时候 我就把这个页面弹出 用户一看 阿里唉大公司 肯定安全 就屁颠屁颠的输入了密码 注意 如果没有同源策略 我这个恶意网站就能通过dom操作获取到用户输入的值 从而控制该账户\n\n#### 1.2.3、AJAX请求为什么不能跨域请求\n\nAJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：\n\n* 用户登录了自己的银行页面 http://mybank.com，http://mybank.com向用户的cookie中添加用户标识。\n* 用户浏览了恶意页面 http://evil.com。执行了页面中的恶意AJAX请求代码。\n* http://evil.com向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n* 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n而且由于Ajax在后台执行，用户无法感知这一过程\n\n\n\n由此可见，"同源策略"是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。感谢有同源策略，用户才有勇气使用互联网。\n\n## 四、IE的例外\n[IE同源策略-MDN][4]\n## 五、总结\n\n### 1.1、同源策略的含义？\n\n### 1.2、同源策略的设计目的，同源策略为了解决什么问题，我们为什么要了解同源策略？\n> 设计目的：同源策略就是希望来自同一个源的页面和脚本可以基本没有什么限制的进行交互；对于不同源的进行隔离\n\n> 解决什么问题:为了安全起见和资源的有效管理，最直接话就是：浏览器的安全基石\n\n> 我们为什么要了解：解决一个痛点，不同域名下的资源读写。\n\n### 1.3、本篇博文的同源策略的前提？\n> 浏览器只是针对同源策略的一中实现\n\n### 1.4、同源策略的一些规则？\n《Web前端黑客技术揭秘》非常系统的讲解了前端安全知识，这些都是围绕同源策略展开的。所以对于浏览器的同源策略这个问题可以很小，同样也可以很大。\n\n# 浏览器同源策略规则下如何规避DOM规则\n## 一、document.domain\n### 1.1、主要场景\n禁止对不同源页面DOM进行操作。这里主要场景就是iframe跨域的情况，不同域名的iframe是限制互相访问的。\n### 1.2、使用情况\n不同窗口（window）或内敛框架元素<iframe>之间互相访问文档内容，包括cookie\n### 1.3、实现前提\n* 协议、端口相同\n* 当前域名的父域相同\n* 其中一个窗口或iframe能得到另一个窗口或iframe引用\n\n> 上面所述父域不能为顶级域名（或者说是一级域名）\n[实例][5]\nhttps://zhuanlan.zhihu.com/p/28562290\nJS提升二级域名（document.domain+iframe子域名代理）\n\n### 1.4、举例\n比如a页面地址为 http://a.yourhost.com b页面为 http://b.yourhost.com。 这样就可以通过分别给两个页面设置 document.domain = yourhost.com 来实现跨域。 之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。实现不同源页面DOM操作\n# 浏览器同源策略规则下如何规避AJAX的规则\n\n\n## 二、JSONP\n\n\n### 1.1、主要场景\n\n禁止使用XHR对象向不同源服务器地址发起HTTP请求\n\n### 1.2、出现原因\n    因为<script src=""></script>标签不受同源策略的限制\n### 1.3、实现\n具体思路就是：利用script元素的src属性，页面可以向任何域的服务器端请求数据，服务器接收到请求以后，将json数据（或者其他）传入一个指定名字的回调函数里，再传回给客户端，这样客户端就可以处理返回的数据（实现了跨域），这种使用模式就是所谓的JSONP\n\n```\n<script type="text/javascript">\n\n    function handleResponse(response){\n            console.log(response);\n    }\n        //找一个点击的按钮\n        var oBtn = document.getElementById(\'btn\');\n        \n        oBtn.onclick = function() {\n            let script = document.createElement("script");\n            script.src="请求地址?callback=handleResponse";\n            document.body.insertBefore(script, document.body.firstChild);\n        }\n\n    };\n</script>\n```\n### 1.4、callback详细过程\n\n详细理解可以看[jsonp和json - 博客园][6]\n\n假设服务器端有数据“foobar”需要传给客户端。\n在客户端定义如下函数用来对数据进行打印、警告灯操作：\n```\nfunction print(e){\n    console.log(e)\n}\n\nfunction warn(e){\n    alert(e);\n}\n```\n假如说服务器端用来获取数据的url是\n\n    http://server.com/jsonp.php\n    \n然后我们使用<script>标签发起如下请求\n\n    http://server.com/jsonp.php?callback=print\n\n当这个php页面检测到callback参数的值时，会把要发送给客户端的数据包裹在print的函数调用里，变成这种样子返回给客户端（由后端处理，下面仅仅是一种处理方式）（后端的处理就是拼接字符串，形成一个javascript代码段）\n\n    返回：print("foobar");\n\n这样对这个请求的结果其实就是一段javascript代码\n\n由此我们可以知道，jsonp实际上是和后端进行配合，后端需要保证输出的response text必须符合js语法，如果在请求过程中出现语法报错或者仅仅返回json数据不是javascript代码段，则可以判定这个接口不支持jsonp\n\n### 1.5、例子详细探究\n\n\n* 返回到script中的内容是什么？进行分析？//参考这个cache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9和https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse\n\n* 例子的回调函数放置的位置有没有影响？\n\n* 分析一个不支持jsonp的接口，观察这个出错原因？\n\n* 了解callback这个名字，只是前后端约定的一个名字\n\n### 1.6、json和jsonp区别\n\njsonp就是json格式的数据，但是和json有什么不同？\n\ncontent-type不同json是application/json，jsonp是text/javascript。意思是jsonp对浏览器而言内容是javascript。就是因为加载javascript允许跨域，使用json的content-type就不能跨域访问。\n\n**ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。**\n\n### 1.7、ajax中json具体过程\n\n* $.ajax方法会动态创建一个script标签，将url的值赋给src属性，将data的数据拼接在src地址后面\n* 当将dataType设置为jsonp后，把这个方法的名字拼接在url的后面传递给服务器\n* 在服务器的内部，首先会获取到前端传递过来的方法名，然后在方法名后面拼接需要传递过去的数据，在最后返回的是一个已经拼接好的参数的方法调用。\n* 前端接受到后台返回的字符串 会当做js进行解析\n* 将动态创建的标签删除。\n\n### 1.8、优缺点\n#### 优点\n\n* 可以跨越同源策略。\n* 兼容性很好\n\n#### 缺点\n* 仅仅支持get请求，不支持post请求\n* 仅仅支持跨域http请求这种情况，不能解决两个页面之间的如何进行JavaScript调用的问题\n* Jsonp在调用失败的时候不会返回各种http状态码\n* 缺点是安全性。万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个 jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。\n\n  [1]: https://www.zhihu.com/question/25427931\n  [2]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [3]: http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg\n  [4]: https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\n  [5]: https://segmentfault.com/a/1190000010803881\n  [6]: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n  [7]: https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg',
  id: '186' } { Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'btn');%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20oBtn.onclick%20=%20f' at line 2
    at Query.Sequence._packetToError (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:47:14)
    at Query.ErrorPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Query.js:77:18)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at Socket.Readable.push (_stream_readable.js:208:10)
    at TCP.onread (net.js:607:20)
    --------------------
    at Protocol._enqueue (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:144:48)
    at PoolConnection.query (d:\github\personalSite\node_modules\mysql\lib\Connection.js:200:25)
    at pool.getConnection (d:\github\personalSite\server\db\index.js:11:20)
    at Ping.onOperationComplete (d:\github\personalSite\node_modules\mysql\lib\Pool.js:110:5)
    at Ping.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at Ping._callback (d:\github\personalSite\node_modules\mysql\lib\Connection.js:468:16)
    at Ping.Sequence.end (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:83:24)
    at Ping.Sequence.OkPacket (d:\github\personalSite\node_modules\mysql\lib\protocol\sequences\Sequence.js:92:8)
    at Protocol._parsePacket (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:278:23)
    at Parser.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Parser.js:76:12)
    at Protocol.write (d:\github\personalSite\node_modules\mysql\lib\protocol\Protocol.js:38:16)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:91:28)
    at Socket.<anonymous> (d:\github\personalSite\node_modules\mysql\lib\Connection.js:502:10)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  code: 'ER_PARSE_ERROR',
  errno: 1064,
  sqlMessage: 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'btn\');%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20oBtn.onclick%20=%20f\' at line 2',
  sqlState: '42000',
  index: 0,
  sql: '\n      update article set\n        title=\'新建\',\n        content=\'%0A#%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%8F%8A%E8%A7%84%E9%81%BFAjax%E4%B8%ADjsonp%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%0A%0A%0A%5B%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E7%9F%A5%E4%B9%8E%5D%5B1%5D%0A%5B%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-MDN%5D%5B2%5D%0A%0A%0A---%0A*%20%E4%BB%80%E4%B9%88%E6%98%AF%EF%BC%9A%E2%80%9C%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E2%80%9D%E3%80%82%0A%0A*%20%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AAurl%E6%98%AF%E4%B8%8D%E6%98%AF%E5%90%8C%E6%BA%90%0A%0A*%20%E4%BA%86%E8%A7%A3%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%83%A8%E5%88%86%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%0A%0A*%20jsonp%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%0A%0A%0A#%20%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%88SOP%EF%BC%89%0A##%20%E4%B8%80%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%0A###%201.1%E5%87%BA%E7%8E%B0%0A1995%E5%B9%B4%EF%BC%8C%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%94%B1Netscape%E5%85%AC%E5%8F%B8%E5%BC%95%E5%85%A5%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%9F%E6%98%AF%E7%94%B1Netscape%E6%8F%90%E5%87%BA%E7%9A%84%E4%B8%80%E4%B8%AA%E8%91%97%E5%90%8D%E7%9A%84%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E3%80%82%E7%9B%B4%E8%87%B3%E7%9B%AE%E5%89%8D%E4%B8%BA%E6%AD%A2%EF%BC%8C%E6%89%80%E6%9C%89%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E7%AD%96%E7%95%A5%E3%80%82%0A###%201.2%E5%90%AB%E4%B9%89%0A%E6%89%80%E8%B0%93%E7%9A%84%E2%80%9C%E5%90%8C%E6%BA%90%E2%80%9D%E6%8C%87%E7%9A%84%E6%98%AF%E4%B8%89%E4%B8%AA%E7%9B%B8%E5%90%8C%0A%0A*%20%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%90%8C%0A*%20%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%90%8C%0A*%20%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%90%8C%0A%0A%E6%88%91%E4%BB%AC%E5%B0%86%E4%B8%89%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E8%A7%86%E4%B8%BA%E5%90%8C%E4%B8%80%E4%B8%AA**%E5%9F%9F**%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%9F%9F%E7%9A%84%E8%84%9A%E6%9C%AC%E4%BB%85%E4%BB%85%E5%85%B7%E6%9C%89%E6%9C%AC%E5%9F%9F%E5%86%85%E7%9A%84%E6%9D%83%E9%99%90%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%90%86%E8%A7%A3%E4%B8%BA%E6%9C%AC%E5%9F%9F%E8%84%9A%E6%9C%AC%E5%8F%AA%E8%83%BD%E8%AF%BB%E5%86%99%E6%9C%AC%E5%9F%9F%E5%86%85%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E8%80%8C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96%E5%9F%9F%E7%9A%84%E8%B5%84%E6%BA%90%E3%80%82%E8%BF%99%E7%A7%8D%E5%AE%89%E5%85%A8%E9%99%90%E5%88%B6%E7%A7%B0%E4%B9%8B%E4%B8%BA%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E3%80%82%0A%0A%E8%AF%A6%E7%BB%86%E4%BE%8B%E5%AD%90%EF%BC%9A%0A%0A!%5B%E6%AD%A4%E5%A4%84%E8%BE%93%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%8F%8F%E8%BF%B0%5D%5B3%5D%0A%0A%E5%B0%8F%E9%97%AE%E9%A2%98%EF%BC%9A%E6%98%AF%E5%90%A6%E5%85%81%E8%AE%B8%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%EF%BC%88%E4%BE%9D%E8%B5%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0%EF%BC%89%0A%0Ahttp://www.a.com:80/page1.html%0Ahttp://www.a.com/page2.html%0A%0A##%20%E4%BA%8C%E3%80%81%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E4%B8%8D%E5%8F%97%E9%99%90%E5%88%B6%EF%BC%88%E9%83%A8%E5%88%86%E8%A7%84%E5%88%99%EF%BC%89%0A###%201.1%E3%80%81%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%87%BA%E7%8E%B0%E8%83%8C%E6%99%AF%0A%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E6%96%B9%E4%BE%BF%E6%80%A7%E6%98%AF%E6%88%90%E5%8F%8D%E6%AF%94%E7%9A%84%EF%BC%8C%E5%8D%81%E4%BD%8D%E6%95%B0%E7%9A%84%E5%AF%86%E7%A0%81%E6%8F%90%E9%AB%98%E4%BA%86%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E6%96%B9%E4%BE%BF%E8%AE%B0%E5%BF%86%E3%80%82%E5%90%8C%E6%A0%B7%EF%BC%8C%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E6%8F%90%E5%8D%87%E4%BA%86Web%E5%89%8D%E7%AB%AF%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%8C%E4%BD%86%E7%89%BA%E7%89%B2%E4%BA%86Web%E6%8B%93%E5%B1%95%E4%B8%8A%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7%E3%80%82%E8%AE%BE%E6%83%B3%E8%8B%A5%E6%8A%8Ahtml%E3%80%81js%E3%80%81css%E3%80%81flash%EF%BC%8Cimage%E7%AD%89%E6%96%87%E4%BB%B6%E5%85%A8%E9%83%A8%E5%B8%83%E7%BD%AE%E5%9C%A8%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E5%B0%8F%E7%BD%91%E7%AB%99%E8%BF%99%E6%A0%B7%E5%87%91%E6%B4%BB%E8%BF%98%E8%A1%8C%EF%BC%8C%E5%A4%A7%E4%B8%AD%E7%BD%91%E7%AB%99%E5%A6%82%E6%9E%9C%E8%BF%99%E6%A0%B7%E5%81%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%B9%E6%9C%AC%E5%8F%97%E4%B8%8D%E4%BA%86%E7%9A%84%EF%BC%8C%E5%8F%AF%E7%94%A8%E6%80%A7%E9%83%BD%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%AE%89%E5%85%A8%E6%80%A7%E8%BF%98%E7%AE%97%E4%B8%AA%E5%90%8A%EF%BC%9F%0A%E6%89%80%E4%BB%A5%EF%BC%8C%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%A8%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B9%8B%E9%97%B4%E9%80%89%E6%8B%A9%E4%BA%86%E4%B8%80%E4%B8%AA%E5%B9%B3%E8%A1%A1%E7%82%B9%E3%80%82%E5%9C%A8%E9%81%B5%E5%BE%AA%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%8C%E9%80%89%E6%8B%A9%E6%80%A7%E5%9C%B0%E4%B8%BA%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E2%80%9C%E5%BC%80%E6%94%BE%E4%BA%86%E5%90%8E%E9%97%A8%E2%80%9D%E3%80%82%0A%0A###%201.2%E3%80%81%E5%BC%80%E6%94%BE%E7%9A%84%E5%90%8E%E9%97%A8%0A%E6%89%80%E4%BB%A5%E5%B0%B1%E6%9C%89%E4%B8%8D%E5%8F%97%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%99%90%E5%88%B6%E7%9A%84%EF%BC%9A%0A%0A%60%60%60%0A%E5%A4%9A%E5%AA%92%E4%BD%93%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE%3Cimg%20src=%22%22%3E%0A%E8%84%9A%E6%9C%AC%E6%A0%87%E7%AD%BE%3Cscript%20src=%22%22%3E%0A%E6%A0%B7%E5%BC%8F%E6%A0%87%E7%AD%BE%3Clink%20rel=%22stylesheet%22%20href=%22%22%3E%0A%3Cframe%3E,%20%3Ciframe%3E%0A%3Ca%3E%0A%E8%BF%98%E6%9C%89%E5%85%B6%E4%BB%96%E7%9A%84%C2%B7%C2%B7%C2%B7%0A%60%60%60%0A%0A###%201.3%E3%80%81%E4%B8%8D%E6%98%AF%E7%BB%9D%E5%AF%B9%E7%9A%84%EF%BC%88%E8%80%83%E8%99%91%E8%BF%99%E6%98%AF%E4%BB%80%E4%B9%88%E7%9A%84%E7%AB%AF%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8CNode%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%BE%97%E6%96%87%E4%BB%B6%EF%BC%89%0A%0A%E4%BB%8A%E5%A4%A9%E6%89%80%E8%AE%B2%E7%9A%84%E9%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E5%89%8D%E6%8F%90%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E9%92%88%E5%AF%B9%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0%0A%0A%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%8D%E6%98%AF%E7%BB%9D%E5%AF%B9%E7%9A%84%EF%BC%9B%E4%BE%8B%E5%A6%82img%20**script**%20style%E7%AD%89%E6%A0%87%E7%AD%BE%EF%BC%8C%E9%83%BD%E5%85%81%E8%AE%B8%E5%9E%AE%E5%9F%9F%E5%BC%95%E7%94%A8%E8%B5%84%E6%BA%90%EF%BC%8C%E4%B8%A5%E6%A0%BC%E8%AF%B4%E8%BF%99%E9%83%BD%E6%98%AF%E4%B8%8D%E7%AC%A6%E5%90%88%E5%90%8C%E6%BA%90%E8%A6%81%E6%B1%82%E7%9A%84%EF%BC%88%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%EF%BC%89%E3%80%82%E7%84%B6%E8%80%8C%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AA%E8%83%BD%E6%98%AF%E5%BC%95%E7%94%A8%E8%BF%99%E4%BA%9B%E8%B5%84%E6%BA%90%E8%80%8C%E5%B7%B2%EF%BC%8C%E5%B9%B6%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96%E8%BF%99%E4%BA%9B%E8%B5%84%E6%BA%90%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E4%B8%8D%E4%BF%A1%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AF%95%E8%AF%95%EF%BC%9A%E5%9C%A8%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%86%85%E8%AF%BB%E5%8F%96%E7%99%BE%E5%BA%A6logo%E5%9B%BE%E7%89%87%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E4%BB%A5%E8%AF%BB%E5%8F%96%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E4%B8%BA%E5%87%86%E3%80%82%EF%BC%88%E6%9A%B4%E8%84%BE%E6%B0%94%EF%BC%8C%E8%AF%95%E8%AF%95%E5%B0%B1%E8%AF%95%E8%AF%95%EF%BC%8Cwho%E6%80%95who%EF%BC%89%0A%E4%BD%A0%E5%BE%88%E5%BF%AB%E5%8F%91%E7%8E%B0%E8%BF%99%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84%EF%BC%8C%E4%BD%A0%E9%A1%B6%E5%A4%9A%E5%8F%AA%E8%83%BD%E5%88%A4%E6%96%AD%E8%BF%99%E5%BC%A0%E5%9B%BE%E7%89%87%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%88%E4%BD%BF%E7%94%A8%E7%9A%84img%E6%A0%87%E7%AD%BE%E7%9A%84onerror%E5%B1%9E%E6%80%A7%20%EF%BC%89%E3%80%82%E5%9B%A0%E6%AD%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E9%99%8D%E4%BD%8E%E4%BA%86%E9%82%A3%E4%B9%88%E4%B8%80%E7%82%B9%E7%82%B9%E5%AE%89%E5%85%A8%E6%80%A7%EF%BC%8C%E5%8D%B4%E5%A4%A7%E5%A4%A7%E6%8F%90%E5%8D%87%E7%BD%91%E7%AB%99%E5%B8%83%E7%BD%AE%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7%E3%80%82%0A%0A##%20%E4%B8%89%E3%80%81%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E9%99%90%E5%88%B6%EF%BC%88%E9%83%A8%E5%88%86%E8%A7%84%E5%88%99%EF%BC%89%0A%0A###%201.1%E3%80%81%E9%99%90%E5%88%B6%E5%86%85%E5%AE%B9%0A%0A%E9%9A%8F%E7%9D%80%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%8F%91%E5%B1%95%EF%BC%8C%E2%80%9C%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E2%80%9D%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B8%A5%E6%A0%BC%EF%BC%88%E5%8E%9F%E5%9B%A0%E9%83%BD%E7%9F%A5%E9%81%93%EF%BC%8C%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B6%8A%E6%9D%A5%E8%B6%8A%E9%87%8D%E8%A6%81%EF%BC%89%EF%BC%8C%E7%9B%B4%E5%88%B0%E7%9B%AE%E5%89%8D%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%9D%9E%E5%90%8C%E6%BA%90%EF%BC%8C%E6%80%BB%E5%85%B1%E6%9C%89%E4%B8%89%E7%A7%8D%E8%A1%8C%E4%B8%BA%E6%94%B6%E5%88%B0%E9%99%90%E5%88%B6%E3%80%82%0A%0A*%20Cookie%E3%80%81LocalStorage%E5%92%8CIndexDB%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%0A*%20DOM%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%0A*%20AJAX%E8%AF%B7%E6%B1%82%E4%B8%8D%E8%83%BD%E5%8F%91%E9%80%81%EF%BC%88XmlHttpRequest%E5%AF%B9%E8%B1%A1%E5%90%91%E4%B8%8D%E5%90%8C%E6%BA%90%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%EF%BC%89%0A%0A###%201.2%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%99%90%E5%88%B6%0A%0A%E4%B8%BA%E4%BA%86%E4%BF%9D%E8%AF%81%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%EF%BC%8C%E9%98%B2%E6%AD%A2%E6%81%B6%E6%84%8F%E7%BD%91%E7%AB%99%E7%AA%83%E5%8F%96%E6%95%B0%E6%8D%AE%E3%80%82%0A%0A####%201.2.1%E3%80%81Cookie%E7%9A%84%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%0A%0A%E8%AE%BE%E6%83%B3%E8%BF%99%E6%A0%B7%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%9AA%E7%BD%91%E7%AB%99%E6%98%AF%E4%B8%80%E5%AE%B6%E9%93%B6%E8%A1%8C%EF%BC%8C%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%8F%88%E5%8E%BB%E6%B5%8F%E8%A7%88%E5%85%B6%E4%BB%96%E7%BD%91%E7%AB%99%E3%80%82%E5%A6%82%E6%9E%9C%E5%85%B6%E4%BB%96%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96A%E7%BD%91%E7%AB%99%E7%9A%84%20Cookie%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F%0A%E5%BE%88%E6%98%BE%E7%84%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%20Cookie%20%E5%8C%85%E5%90%AB%E9%9A%90%E7%A7%81%EF%BC%88%E6%AF%94%E5%A6%82%E5%AD%98%E6%AC%BE%E6%80%BB%E9%A2%9D%EF%BC%89%EF%BC%8C%E8%BF%99%E4%BA%9B%E4%BF%A1%E6%81%AF%E5%B0%B1%E4%BC%9A%E6%B3%84%E6%BC%8F%E3%80%82%E6%9B%B4%E5%8F%AF%E6%80%95%E7%9A%84%E6%98%AF%EF%BC%8CCookie%20%E5%BE%80%E5%BE%80%E7%94%A8%E6%9D%A5%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E7%9A%84%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%94%A8%E6%88%B7%E6%B2%A1%E6%9C%89%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95%EF%BC%8C%E5%85%B6%E4%BB%96%E7%BD%91%E7%AB%99%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%86%92%E5%85%85%E7%94%A8%E6%88%B7%EF%BC%8C%E4%B8%BA%E6%89%80%E6%AC%B2%E4%B8%BA%E3%80%82%E5%9B%A0%E4%B8%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%97%B6%E8%BF%98%E8%A7%84%E5%AE%9A%EF%BC%8C%E6%8F%90%E4%BA%A4%E8%A1%A8%E5%8D%95%E4%B8%8D%E5%8F%97%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6%0A%EF%BC%88%E6%88%91%E7%9A%84%E7%90%86%E8%A7%A3%E6%98%AF%EF%BC%9ACookie%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%AF%86%E5%88%AB%E4%BD%A0%E8%BA%AB%E4%BB%BD%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E4%BF%9D%E5%AD%98%E8%B4%A6%E5%8F%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E6%88%96%E8%AE%B8%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95ID%EF%BC%8C%E8%AE%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%81%BF%E5%85%8D%E9%87%8D%E6%96%B0%E7%99%BB%E5%BD%95%EF%BC%8C%E8%BF%99%E9%87%8C%E9%9D%A2%E4%B9%9F%E5%BE%88%E5%A4%9A%E7%9F%A5%E8%AF%86%EF%BC%8C%E4%BB%85%E4%BB%85%E6%98%AF%E6%88%91%E7%8E%B0%E5%9C%A8%E7%9A%84%E4%BA%86%E8%A7%A3%EF%BC%89%0A####%201.2.2%E3%80%81DOM%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%0A%E5%86%8D%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%88%91%E6%89%AE%E6%BC%94%E5%9D%8F%E4%BA%BA%20%E6%88%91%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AAiframe%20%E5%8A%A0%E8%BD%BD%E6%9F%90%E5%AE%9D%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%20%E7%AD%89%E5%82%BB%E5%82%BB%E7%9A%84%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E6%97%B6%E5%80%99%20%E6%88%91%E5%B0%B1%E6%8A%8A%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E5%BC%B9%E5%87%BA%20%E7%94%A8%E6%88%B7%E4%B8%80%E7%9C%8B%20%E9%98%BF%E9%87%8C%E5%94%89%E5%A4%A7%E5%85%AC%E5%8F%B8%20%E8%82%AF%E5%AE%9A%E5%AE%89%E5%85%A8%20%E5%B0%B1%E5%B1%81%E9%A2%A0%E5%B1%81%E9%A2%A0%E7%9A%84%E8%BE%93%E5%85%A5%E4%BA%86%E5%AF%86%E7%A0%81%20%E6%B3%A8%E6%84%8F%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%20%E6%88%91%E8%BF%99%E4%B8%AA%E6%81%B6%E6%84%8F%E7%BD%91%E7%AB%99%E5%B0%B1%E8%83%BD%E9%80%9A%E8%BF%87dom%E6%93%8D%E4%BD%9C%E8%8E%B7%E5%8F%96%E5%88%B0%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84%E5%80%BC%20%E4%BB%8E%E8%80%8C%E6%8E%A7%E5%88%B6%E8%AF%A5%E8%B4%A6%E6%88%B7%0A%0A####%201.2.3%E3%80%81AJAX%E8%AF%B7%E6%B1%82%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%0A%0AAJAX%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%BB%E8%A6%81%E7%94%A8%E6%9D%A5%E9%98%B2%E6%AD%A2CSRF%E6%94%BB%E5%87%BB%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89AJAX%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%8C%E7%9B%B8%E5%BD%93%E5%8D%B1%E9%99%A9%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%91%E8%B5%B7%E7%9A%84%E6%AF%8F%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82%E9%83%BD%E4%BC%9A%E5%B8%A6%E4%B8%8A%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%E5%AF%B9%E5%BA%94%E7%9A%84cookie%EF%BC%8C%E9%82%A3%E4%B9%88%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%A6%82%E4%B8%8B%E6%94%BB%E5%87%BB%EF%BC%9A%0A%0A*%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BA%86%E8%87%AA%E5%B7%B1%E7%9A%84%E9%93%B6%E8%A1%8C%E9%A1%B5%E9%9D%A2%20http://mybank.com%EF%BC%8Chttp://mybank.com%E5%90%91%E7%94%A8%E6%88%B7%E7%9A%84cookie%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%A0%87%E8%AF%86%E3%80%82%0A*%20%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E4%BA%86%E6%81%B6%E6%84%8F%E9%A1%B5%E9%9D%A2%20http://evil.com%E3%80%82%E6%89%A7%E8%A1%8C%E4%BA%86%E9%A1%B5%E9%9D%A2%E4%B8%AD%E7%9A%84%E6%81%B6%E6%84%8FAJAX%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81%E3%80%82%0A*%20http://evil.com%E5%90%91http://mybank.com%E5%8F%91%E8%B5%B7AJAX%20HTTP%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BC%9A%E9%BB%98%E8%AE%A4%E6%8A%8Ahttp://mybank.com%E5%AF%B9%E5%BA%94cookie%E4%B9%9F%E5%90%8C%E6%97%B6%E5%8F%91%E9%80%81%E8%BF%87%E5%8E%BB%E3%80%82%0A*%20%E9%93%B6%E8%A1%8C%E9%A1%B5%E9%9D%A2%E4%BB%8E%E5%8F%91%E9%80%81%E7%9A%84cookie%E4%B8%AD%E6%8F%90%E5%8F%96%E7%94%A8%E6%88%B7%E6%A0%87%E8%AF%86%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E6%97%A0%E8%AF%AF%EF%BC%8Cresponse%E4%B8%AD%E8%BF%94%E5%9B%9E%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E3%80%82%E6%AD%A4%E6%97%B6%E6%95%B0%E6%8D%AE%E5%B0%B1%E6%B3%84%E9%9C%B2%E4%BA%86%E3%80%82%0A%E8%80%8C%E4%B8%94%E7%94%B1%E4%BA%8EAjax%E5%9C%A8%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%EF%BC%8C%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%84%9F%E7%9F%A5%E8%BF%99%E4%B8%80%E8%BF%87%E7%A8%8B%0A%0A%0A%0A%E7%94%B1%E6%AD%A4%E5%8F%AF%E8%A7%81%EF%BC%8C%22%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%22%E6%98%AF%E5%BF%85%E9%9C%80%E7%9A%84%EF%BC%8C%E5%90%A6%E5%88%99%20Cookie%20%E5%8F%AF%E4%BB%A5%E5%85%B1%E4%BA%AB%EF%BC%8C%E4%BA%92%E8%81%94%E7%BD%91%E5%B0%B1%E6%AF%AB%E6%97%A0%E5%AE%89%E5%85%A8%E5%8F%AF%E8%A8%80%E4%BA%86%E3%80%82%E6%84%9F%E8%B0%A2%E6%9C%89%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%8C%E7%94%A8%E6%88%B7%E6%89%8D%E6%9C%89%E5%8B%87%E6%B0%94%E4%BD%BF%E7%94%A8%E4%BA%92%E8%81%94%E7%BD%91%E3%80%82%0A%0A##%20%E5%9B%9B%E3%80%81IE%E7%9A%84%E4%BE%8B%E5%A4%96%0A%5BIE%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-MDN%5D%5B4%5D%0A##%20%E4%BA%94%E3%80%81%E6%80%BB%E7%BB%93%0A%0A###%201.1%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E5%90%AB%E4%B9%89%EF%BC%9F%0A%0A###%201.2%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%9B%AE%E7%9A%84%EF%BC%8C%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BA%86%E8%A7%A3%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%9F%0A%3E%20%E8%AE%BE%E8%AE%A1%E7%9B%AE%E7%9A%84%EF%BC%9A%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%B0%B1%E6%98%AF%E5%B8%8C%E6%9C%9B%E6%9D%A5%E8%87%AA%E5%90%8C%E4%B8%80%E4%B8%AA%E6%BA%90%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%92%8C%E8%84%9A%E6%9C%AC%E5%8F%AF%E4%BB%A5%E5%9F%BA%E6%9C%AC%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%99%90%E5%88%B6%E7%9A%84%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%EF%BC%9B%E5%AF%B9%E4%BA%8E%E4%B8%8D%E5%90%8C%E6%BA%90%E7%9A%84%E8%BF%9B%E8%A1%8C%E9%9A%94%E7%A6%BB%0A%0A%3E%20%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98:%E4%B8%BA%E4%BA%86%E5%AE%89%E5%85%A8%E8%B5%B7%E8%A7%81%E5%92%8C%E8%B5%84%E6%BA%90%E7%9A%84%E6%9C%89%E6%95%88%E7%AE%A1%E7%90%86%EF%BC%8C%E6%9C%80%E7%9B%B4%E6%8E%A5%E8%AF%9D%E5%B0%B1%E6%98%AF%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%AE%89%E5%85%A8%E5%9F%BA%E7%9F%B3%0A%0A%3E%20%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BA%86%E8%A7%A3%EF%BC%9A%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E7%97%9B%E7%82%B9%EF%BC%8C%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E8%AF%BB%E5%86%99%E3%80%82%0A%0A###%201.3%E3%80%81%E6%9C%AC%E7%AF%87%E5%8D%9A%E6%96%87%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E5%89%8D%E6%8F%90%EF%BC%9F%0A%3E%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AA%E6%98%AF%E9%92%88%E5%AF%B9%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E4%B8%80%E4%B8%AD%E5%AE%9E%E7%8E%B0%0A%0A###%201.4%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E5%88%99%EF%BC%9F%0A%E3%80%8AWeb%E5%89%8D%E7%AB%AF%E9%BB%91%E5%AE%A2%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%E3%80%8B%E9%9D%9E%E5%B8%B8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%B2%E8%A7%A3%E4%BA%86%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%EF%BC%8C%E8%BF%99%E4%BA%9B%E9%83%BD%E6%98%AF%E5%9B%B4%E7%BB%95%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%B1%95%E5%BC%80%E7%9A%84%E3%80%82%E6%89%80%E4%BB%A5%E5%AF%B9%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E5%BE%88%E5%B0%8F%EF%BC%8C%E5%90%8C%E6%A0%B7%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%BE%88%E5%A4%A7%E3%80%82%0A%0A#%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%A7%84%E5%88%99%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BFDOM%E8%A7%84%E5%88%99%0A##%20%E4%B8%80%E3%80%81document.domain%0A###%201.1%E3%80%81%E4%B8%BB%E8%A6%81%E5%9C%BA%E6%99%AF%0A%E7%A6%81%E6%AD%A2%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%BA%90%E9%A1%B5%E9%9D%A2DOM%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%E3%80%82%E8%BF%99%E9%87%8C%E4%B8%BB%E8%A6%81%E5%9C%BA%E6%99%AF%E5%B0%B1%E6%98%AFiframe%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%90%8C%E5%9F%9F%E5%90%8D%E7%9A%84iframe%E6%98%AF%E9%99%90%E5%88%B6%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE%E7%9A%84%E3%80%82%0A###%201.2%E3%80%81%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%0A%E4%B8%8D%E5%90%8C%E7%AA%97%E5%8F%A3%EF%BC%88window%EF%BC%89%E6%88%96%E5%86%85%E6%95%9B%E6%A1%86%E6%9E%B6%E5%85%83%E7%B4%A0%3Ciframe%3E%E4%B9%8B%E9%97%B4%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9%EF%BC%8C%E5%8C%85%E6%8B%ACcookie%0A###%201.3%E3%80%81%E5%AE%9E%E7%8E%B0%E5%89%8D%E6%8F%90%0A*%20%E5%8D%8F%E8%AE%AE%E3%80%81%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%90%8C%0A*%20%E5%BD%93%E5%89%8D%E5%9F%9F%E5%90%8D%E7%9A%84%E7%88%B6%E5%9F%9F%E7%9B%B8%E5%90%8C%0A*%20%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E6%88%96iframe%E8%83%BD%E5%BE%97%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%AA%97%E5%8F%A3%E6%88%96iframe%E5%BC%95%E7%94%A8%0A%0A%3E%20%E4%B8%8A%E9%9D%A2%E6%89%80%E8%BF%B0%E7%88%B6%E5%9F%9F%E4%B8%8D%E8%83%BD%E4%B8%BA%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%EF%BC%88%E6%88%96%E8%80%85%E8%AF%B4%E6%98%AF%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D%EF%BC%89%0A%5B%E5%AE%9E%E4%BE%8B%5D%5B5%5D%0Ahttps://zhuanlan.zhihu.com/p/28562290%0AJS%E6%8F%90%E5%8D%87%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%EF%BC%88document.domain+iframe%E5%AD%90%E5%9F%9F%E5%90%8D%E4%BB%A3%E7%90%86%EF%BC%89%0A%0A###%201.4%E3%80%81%E4%B8%BE%E4%BE%8B%0A%E6%AF%94%E5%A6%82a%E9%A1%B5%E9%9D%A2%E5%9C%B0%E5%9D%80%E4%B8%BA%20http://a.yourhost.com%20b%E9%A1%B5%E9%9D%A2%E4%B8%BA%20http://b.yourhost.com%E3%80%82%20%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%88%86%E5%88%AB%E7%BB%99%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%20document.domain%20=%20yourhost.com%20%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E3%80%82%20%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20parent%20%E6%88%96%E8%80%85%20window%5B%E2%80%98iframename%E2%80%99%5D%E7%AD%89%E6%96%B9%E5%BC%8F%E5%8E%BB%E6%8B%BF%E5%88%B0iframe%E7%9A%84window%E5%AF%B9%E8%B1%A1%E4%BA%86%E3%80%82%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%90%8C%E6%BA%90%E9%A1%B5%E9%9D%A2DOM%E6%93%8D%E4%BD%9C%0A#%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%A7%84%E5%88%99%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BFAJAX%E7%9A%84%E8%A7%84%E5%88%99%0A%0A%0A##%20%E4%BA%8C%E3%80%81JSONP%0A%0A%0A###%201.1%E3%80%81%E4%B8%BB%E8%A6%81%E5%9C%BA%E6%99%AF%0A%0A%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8XHR%E5%AF%B9%E8%B1%A1%E5%90%91%E4%B8%8D%E5%90%8C%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80%E5%8F%91%E8%B5%B7HTTP%E8%AF%B7%E6%B1%82%0A%0A###%201.2%E3%80%81%E5%87%BA%E7%8E%B0%E5%8E%9F%E5%9B%A0%0A%20%20%20%20%E5%9B%A0%E4%B8%BA%3Cscript%20src=%22%22%3E%3C/script%3E%E6%A0%87%E7%AD%BE%E4%B8%8D%E5%8F%97%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E9%99%90%E5%88%B6%0A###%201.3%E3%80%81%E5%AE%9E%E7%8E%B0%0A%E5%85%B7%E4%BD%93%E6%80%9D%E8%B7%AF%E5%B0%B1%E6%98%AF%EF%BC%9A%E5%88%A9%E7%94%A8script%E5%85%83%E7%B4%A0%E7%9A%84src%E5%B1%9E%E6%80%A7%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%8F%AF%E4%BB%A5%E5%90%91%E4%BB%BB%E4%BD%95%E5%9F%9F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%B0%86json%E6%95%B0%E6%8D%AE%EF%BC%88%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%EF%BC%89%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E6%8C%87%E5%AE%9A%E5%90%8D%E5%AD%97%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%87%8C%EF%BC%8C%E5%86%8D%E4%BC%A0%E5%9B%9E%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%88%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%B7%A8%E5%9F%9F%EF%BC%89%EF%BC%8C%E8%BF%99%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F%E5%B0%B1%E6%98%AF%E6%89%80%E8%B0%93%E7%9A%84JSONP%0A%0A%60%60%60%0A%3Cscript%20type=%22text/javascript%22%3E%0A%0A%20%20%20%20function%20handleResponse(response)%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20console.log(response);%0A%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20//%E6%89%BE%E4%B8%80%E4%B8%AA%E7%82%B9%E5%87%BB%E7%9A%84%E6%8C%89%E9%92%AE%0A%20%20%20%20%20%20%20%20var%20oBtn%20=%20document.getElementById(\'btn\');%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20oBtn.onclick%20=%20function()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20script%20=%20document.createElement(%22script%22);%0A%20%20%20%20%20%20%20%20%20%20%20%20script.src=%22%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80?callback=handleResponse%22;%0A%20%20%20%20%20%20%20%20%20%20%20%20document.body.insertBefore(script,%20document.body.firstChild);%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%7D;%0A%3C/script%3E%0A%60%60%60%0A###%201.4%E3%80%81callback%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%0A%0A%E8%AF%A6%E7%BB%86%E7%90%86%E8%A7%A3%E5%8F%AF%E4%BB%A5%E7%9C%8B%5Bjsonp%E5%92%8Cjson%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD%5D%5B6%5D%0A%0A%E5%81%87%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%9C%89%E6%95%B0%E6%8D%AE%E2%80%9Cfoobar%E2%80%9D%E9%9C%80%E8%A6%81%E4%BC%A0%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%82%0A%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9A%E4%B9%89%E5%A6%82%E4%B8%8B%E5%87%BD%E6%95%B0%E7%94%A8%E6%9D%A5%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E6%89%93%E5%8D%B0%E3%80%81%E8%AD%A6%E5%91%8A%E7%81%AF%E6%93%8D%E4%BD%9C%EF%BC%9A%0A%60%60%60%0Afunction%20print(e)%7B%0A%20%20%20%20console.log(e)%0A%7D%0A%0Afunction%20warn(e)%7B%0A%20%20%20%20alert(e);%0A%7D%0A%60%60%60%0A%E5%81%87%E5%A6%82%E8%AF%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%94%A8%E6%9D%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84url%E6%98%AF%0A%0A%20%20%20%20http://server.com/jsonp.php%0A%20%20%20%20%0A%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%3Cscript%3E%E6%A0%87%E7%AD%BE%E5%8F%91%E8%B5%B7%E5%A6%82%E4%B8%8B%E8%AF%B7%E6%B1%82%0A%0A%20%20%20%20http://server.com/jsonp.php?callback=print%0A%0A%E5%BD%93%E8%BF%99%E4%B8%AAphp%E9%A1%B5%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%B0callback%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC%E6%97%B6%EF%BC%8C%E4%BC%9A%E6%8A%8A%E8%A6%81%E5%8F%91%E9%80%81%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85%E8%A3%B9%E5%9C%A8print%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E9%87%8C%EF%BC%8C%E5%8F%98%E6%88%90%E8%BF%99%E7%A7%8D%E6%A0%B7%E5%AD%90%E8%BF%94%E5%9B%9E%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88%E7%94%B1%E5%90%8E%E7%AB%AF%E5%A4%84%E7%90%86%EF%BC%8C%E4%B8%8B%E9%9D%A2%E4%BB%85%E4%BB%85%E6%98%AF%E4%B8%80%E7%A7%8D%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%EF%BC%89%EF%BC%88%E5%90%8E%E7%AB%AF%E7%9A%84%E5%A4%84%E7%90%86%E5%B0%B1%E6%98%AF%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%BD%A2%E6%88%90%E4%B8%80%E4%B8%AAjavascript%E4%BB%A3%E7%A0%81%E6%AE%B5%EF%BC%89%0A%0A%20%20%20%20%E8%BF%94%E5%9B%9E%EF%BC%9Aprint(%22foobar%22);%0A%0A%E8%BF%99%E6%A0%B7%E5%AF%B9%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E7%9A%84%E7%BB%93%E6%9E%9C%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E6%AE%B5javascript%E4%BB%A3%E7%A0%81%0A%0A%E7%94%B1%E6%AD%A4%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9F%A5%E9%81%93%EF%BC%8Cjsonp%E5%AE%9E%E9%99%85%E4%B8%8A%E6%98%AF%E5%92%8C%E5%90%8E%E7%AB%AF%E8%BF%9B%E8%A1%8C%E9%85%8D%E5%90%88%EF%BC%8C%E5%90%8E%E7%AB%AF%E9%9C%80%E8%A6%81%E4%BF%9D%E8%AF%81%E8%BE%93%E5%87%BA%E7%9A%84response%20text%E5%BF%85%E9%A1%BB%E7%AC%A6%E5%90%88js%E8%AF%AD%E6%B3%95%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%9C%A8%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E8%AF%AD%E6%B3%95%E6%8A%A5%E9%94%99%E6%88%96%E8%80%85%E4%BB%85%E4%BB%85%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE%E4%B8%8D%E6%98%AFjavascript%E4%BB%A3%E7%A0%81%E6%AE%B5%EF%BC%8C%E5%88%99%E5%8F%AF%E4%BB%A5%E5%88%A4%E5%AE%9A%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E4%B8%8D%E6%94%AF%E6%8C%81jsonp%0A%0A###%201.5%E3%80%81%E4%BE%8B%E5%AD%90%E8%AF%A6%E7%BB%86%E6%8E%A2%E7%A9%B6%0A%0A%0A*%20%E8%BF%94%E5%9B%9E%E5%88%B0script%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%9F//%E5%8F%82%E8%80%83%E8%BF%99%E4%B8%AAcache.video.iqiyi.com/jp/avlist/202861101/1/?callback=jsonp9%E5%92%8Chttps://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse%0A%0A*%20%E4%BE%8B%E5%AD%90%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%94%BE%E7%BD%AE%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%9C%89%E6%B2%A1%E6%9C%89%E5%BD%B1%E5%93%8D%EF%BC%9F%0A%0A*%20%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%94%AF%E6%8C%81jsonp%E7%9A%84%E6%8E%A5%E5%8F%A3%EF%BC%8C%E8%A7%82%E5%AF%9F%E8%BF%99%E4%B8%AA%E5%87%BA%E9%94%99%E5%8E%9F%E5%9B%A0%EF%BC%9F%0A%0A*%20%E4%BA%86%E8%A7%A3callback%E8%BF%99%E4%B8%AA%E5%90%8D%E5%AD%97%EF%BC%8C%E5%8F%AA%E6%98%AF%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BA%A6%E5%AE%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E5%90%8D%E5%AD%97%0A%0A###%201.6%E3%80%81json%E5%92%8Cjsonp%E5%8C%BA%E5%88%AB%0A%0Ajsonp%E5%B0%B1%E6%98%AFjson%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E5%92%8Cjson%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F%0A%0Acontent-type%E4%B8%8D%E5%90%8Cjson%E6%98%AFapplication/json%EF%BC%8Cjsonp%E6%98%AFtext/javascript%E3%80%82%E6%84%8F%E6%80%9D%E6%98%AFjsonp%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%80%8C%E8%A8%80%E5%86%85%E5%AE%B9%E6%98%AFjavascript%E3%80%82%E5%B0%B1%E6%98%AF%E5%9B%A0%E4%B8%BA%E5%8A%A0%E8%BD%BDjavascript%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%EF%BC%8C%E4%BD%BF%E7%94%A8json%E7%9A%84content-type%E5%B0%B1%E4%B8%8D%E8%83%BD%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E3%80%82%0A%0A**ajax%E7%9A%84%E6%A0%B8%E5%BF%83%E6%98%AF%E9%80%9A%E8%BF%87XmlHttpRequest%E8%8E%B7%E5%8F%96%E9%9D%9E%E6%9C%AC%E9%A1%B5%E5%86%85%E5%AE%B9%EF%BC%8C%E8%80%8Cjsonp%E7%9A%84%E6%A0%B8%E5%BF%83%E5%88%99%E6%98%AF%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%3Cscript%3E%E6%A0%87%E7%AD%BE%E6%9D%A5%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BE%9B%E7%9A%84js%E8%84%9A%E6%9C%AC%E3%80%82**%0A%0A###%201.7%E3%80%81ajax%E4%B8%ADjson%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%0A%0A*%20$.ajax%E6%96%B9%E6%B3%95%E4%BC%9A%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAscript%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%B0%86url%E7%9A%84%E5%80%BC%E8%B5%8B%E7%BB%99src%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%B0%86data%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8B%BC%E6%8E%A5%E5%9C%A8src%E5%9C%B0%E5%9D%80%E5%90%8E%E9%9D%A2%0A*%20%E5%BD%93%E5%B0%86dataType%E8%AE%BE%E7%BD%AE%E4%B8%BAjsonp%E5%90%8E%EF%BC%8C%E6%8A%8A%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E5%90%8D%E5%AD%97%E6%8B%BC%E6%8E%A5%E5%9C%A8url%E7%9A%84%E5%90%8E%E9%9D%A2%E4%BC%A0%E9%80%92%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%0A*%20%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E9%83%A8%EF%BC%8C%E9%A6%96%E5%85%88%E4%BC%9A%E8%8E%B7%E5%8F%96%E5%88%B0%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E8%BF%87%E6%9D%A5%E7%9A%84%E6%96%B9%E6%B3%95%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E6%96%B9%E6%B3%95%E5%90%8D%E5%90%8E%E9%9D%A2%E6%8B%BC%E6%8E%A5%E9%9C%80%E8%A6%81%E4%BC%A0%E9%80%92%E8%BF%87%E5%8E%BB%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9C%A8%E6%9C%80%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E5%B7%B2%E7%BB%8F%E6%8B%BC%E6%8E%A5%E5%A5%BD%E7%9A%84%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E3%80%82%0A*%20%E5%89%8D%E7%AB%AF%E6%8E%A5%E5%8F%97%E5%88%B0%E5%90%8E%E5%8F%B0%E8%BF%94%E5%9B%9E%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E4%BC%9A%E5%BD%93%E5%81%9Ajs%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%0A*%20%E5%B0%86%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E7%9A%84%E6%A0%87%E7%AD%BE%E5%88%A0%E9%99%A4%E3%80%82%0A%0A###%201.8%E3%80%81%E4%BC%98%E7%BC%BA%E7%82%B9%0A####%20%E4%BC%98%E7%82%B9%0A%0A*%20%E5%8F%AF%E4%BB%A5%E8%B7%A8%E8%B6%8A%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E3%80%82%0A*%20%E5%85%BC%E5%AE%B9%E6%80%A7%E5%BE%88%E5%A5%BD%0A%0A####%20%E7%BC%BA%E7%82%B9%0A*%20%E4%BB%85%E4%BB%85%E6%94%AF%E6%8C%81get%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81post%E8%AF%B7%E6%B1%82%0A*%20%E4%BB%85%E4%BB%85%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9Fhttp%E8%AF%B7%E6%B1%82%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B9%8B%E9%97%B4%E7%9A%84%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CJavaScript%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98%0A*%20Jsonp%E5%9C%A8%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%90%84%E7%A7%8Dhttp%E7%8A%B6%E6%80%81%E7%A0%81%0A*%20%E7%BC%BA%E7%82%B9%E6%98%AF%E5%AE%89%E5%85%A8%E6%80%A7%E3%80%82%E4%B8%87%E4%B8%80%E5%81%87%E5%A6%82%E6%8F%90%E4%BE%9Bjsonp%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%AD%98%E5%9C%A8%E9%A1%B5%E9%9D%A2%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%8D%B3%E5%AE%83%E8%BF%94%E5%9B%9E%E7%9A%84javascript%E7%9A%84%E5%86%85%E5%AE%B9%E8%A2%AB%E4%BA%BA%E6%8E%A7%E5%88%B6%E7%9A%84%E3%80%82%E9%82%A3%E4%B9%88%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%89%80%E6%9C%89%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%20jsonp%E7%9A%84%E7%BD%91%E7%AB%99%E9%83%BD%E4%BC%9A%E5%AD%98%E5%9C%A8%E6%BC%8F%E6%B4%9E%E3%80%82%E4%BA%8E%E6%98%AF%E6%97%A0%E6%B3%95%E6%8A%8A%E5%8D%B1%E9%99%A9%E6%8E%A7%E5%88%B6%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E4%B8%8B%E2%80%A6%E6%89%80%E4%BB%A5%E5%9C%A8%E4%BD%BF%E7%94%A8jsonp%E7%9A%84%E6%97%B6%E5%80%99%E5%BF%85%E9%A1%BB%E8%A6%81%E4%BF%9D%E8%AF%81%E4%BD%BF%E7%94%A8%E7%9A%84jsonp%E6%9C%8D%E5%8A%A1%E5%BF%85%E9%A1%BB%E6%98%AF%E5%AE%89%E5%85%A8%E5%8F%AF%E4%BF%A1%E7%9A%84%E3%80%82%0A%0A%20%20%5B1%5D:%20https://www.zhihu.com/question/25427931%0A%20%20%5B2%5D:%20https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy%0A%20%20%5B3%5D:%20http://oquq74tfk.bkt.clouddn.com/17-11-11/4904886.jpg%0A%20%20%5B4%5D:%20https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy%0A%20%20%5B5%5D:%20https://segmentfault.com/a/1190000010803881%0A%20%20%5B6%5D:%20http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html%0A%20%20%5B7%5D:%20https://pic3.zhimg.com/v2-cc080704e962159246110c870e3cccc6_r.jpg\',\n        descript=\'测试线文章的\',\n        categroy_id=\'19\',\n        update_time=\'2018-10-09 13:06\'\n      where id=186\n    ' }
